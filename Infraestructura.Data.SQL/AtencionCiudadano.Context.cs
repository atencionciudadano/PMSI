//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infraestructura.Data.SQL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MunicipalidadSanIsidroEntities_New : DbContext
    {
        public MunicipalidadSanIsidroEntities_New()
            : base("name=MunicipalidadSanIsidroEntities_New")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<DEPARTAMENTO> DEPARTAMENTOes { get; set; }
        public DbSet<DISTRITO> DISTRITOes { get; set; }
        public DbSet<PERSONA> PERSONAs { get; set; }
        public DbSet<PERSONAJURIDICA> PERSONAJURIDICAs { get; set; }
        public DbSet<PERSONANATURAL> PERSONANATURALs { get; set; }
        public DbSet<PROVINCIA> PROVINCIAs { get; set; }
        public DbSet<QUEJARECLAMO> QUEJARECLAMOes { get; set; }
        public DbSet<TIPODOCUMENTOIDENTIDAD> TIPODOCUMENTOIDENTIDADs { get; set; }
        public DbSet<AREA> AREA { get; set; }
        public DbSet<CARGO> CARGO { get; set; }
        public DbSet<EMPLEADO> EMPLEADO { get; set; }
        public DbSet<HOJARESPUESTA> HOJARESPUESTA { get; set; }
        public DbSet<INFORMETERCERO> INFORMETERCERO { get; set; }
        public DbSet<REGISTROEVENTO> REGISTROEVENTO { get; set; }
        public DbSet<SOLICITUDTERCERO> SOLICITUDTERCERO { get; set; }
        public DbSet<SUGERENCIA> SUGERENCIA { get; set; }
        public DbSet<TERCERO> TERCERO { get; set; }
        public DbSet<ESTADOS_QUEJARECLAMO> ESTADOS_QUEJARECLAMO { get; set; }
        public DbSet<ESTADOS_SOLICITUDTERCERO> ESTADOS_SOLICITUDTERCERO { get; set; }
        public DbSet<EVENTO> EVENTOes { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<int>> SPI_RegistrarQuejaReclamo(Nullable<int> codDistrito, Nullable<int> codTipoDocumento, string nombres, string apePaterno, string apeMaterno, string numeroDocumento, string direccion, string telefono, string correo, string nroRegistro, Nullable<System.DateTime> fecha, string hora, string asunto, string descripcion, string archivoAdjunto, Nullable<int> usrRegistra)
        {
            var codDistritoParameter = codDistrito.HasValue ?
                new ObjectParameter("codDistrito", codDistrito) :
                new ObjectParameter("codDistrito", typeof(int));
    
            var codTipoDocumentoParameter = codTipoDocumento.HasValue ?
                new ObjectParameter("codTipoDocumento", codTipoDocumento) :
                new ObjectParameter("codTipoDocumento", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apePaternoParameter = apePaterno != null ?
                new ObjectParameter("ApePaterno", apePaterno) :
                new ObjectParameter("ApePaterno", typeof(string));
    
            var apeMaternoParameter = apeMaterno != null ?
                new ObjectParameter("ApeMaterno", apeMaterno) :
                new ObjectParameter("ApeMaterno", typeof(string));
    
            var numeroDocumentoParameter = numeroDocumento != null ?
                new ObjectParameter("NumeroDocumento", numeroDocumento) :
                new ObjectParameter("NumeroDocumento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var nroRegistroParameter = nroRegistro != null ?
                new ObjectParameter("NroRegistro", nroRegistro) :
                new ObjectParameter("NroRegistro", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var horaParameter = hora != null ?
                new ObjectParameter("Hora", hora) :
                new ObjectParameter("Hora", typeof(string));
    
            var asuntoParameter = asunto != null ?
                new ObjectParameter("Asunto", asunto) :
                new ObjectParameter("Asunto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var archivoAdjuntoParameter = archivoAdjunto != null ?
                new ObjectParameter("ArchivoAdjunto", archivoAdjunto) :
                new ObjectParameter("ArchivoAdjunto", typeof(string));
    
            var usrRegistraParameter = usrRegistra.HasValue ?
                new ObjectParameter("UsrRegistra", usrRegistra) :
                new ObjectParameter("UsrRegistra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPI_RegistrarQuejaReclamo", codDistritoParameter, codTipoDocumentoParameter, nombresParameter, apePaternoParameter, apeMaternoParameter, numeroDocumentoParameter, direccionParameter, telefonoParameter, correoParameter, nroRegistroParameter, fechaParameter, horaParameter, asuntoParameter, descripcionParameter, archivoAdjuntoParameter, usrRegistraParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SPI_RegistroAtencion(Nullable<int> idQuejaReclamo, Nullable<int> idArea, Nullable<int> idEstadoQuejaReclamo, Nullable<int> idEvento, string observacion, Nullable<int> usrRegistra)
        {
            var idQuejaReclamoParameter = idQuejaReclamo.HasValue ?
                new ObjectParameter("IdQuejaReclamo", idQuejaReclamo) :
                new ObjectParameter("IdQuejaReclamo", typeof(int));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            var idEstadoQuejaReclamoParameter = idEstadoQuejaReclamo.HasValue ?
                new ObjectParameter("IdEstadoQuejaReclamo", idEstadoQuejaReclamo) :
                new ObjectParameter("IdEstadoQuejaReclamo", typeof(int));
    
            var idEventoParameter = idEvento.HasValue ?
                new ObjectParameter("IdEvento", idEvento) :
                new ObjectParameter("IdEvento", typeof(int));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            var usrRegistraParameter = usrRegistra.HasValue ?
                new ObjectParameter("UsrRegistra", usrRegistra) :
                new ObjectParameter("UsrRegistra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPI_RegistroAtencion", idQuejaReclamoParameter, idAreaParameter, idEstadoQuejaReclamoParameter, idEventoParameter, observacionParameter, usrRegistraParameter);
        }
    }
}
